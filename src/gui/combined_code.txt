===== ./gui_main.cpp =====
// Dear ImGui: standalone example application for DirectX 11 integrated with my PIO Emulator

#include "imgui.h"
#include "imgui_impl_win32.h"
#include "imgui_impl_dx11.h"
#include <d3d11.h>
#include <tchar.h>
#include "../PioStateMachine.h"  
#include "PioStateMachineApp.h"

// Data
static ID3D11Device* g_pd3dDevice = nullptr;
static ID3D11DeviceContext* g_pd3dDeviceContext = nullptr;
static IDXGISwapChain* g_pSwapChain = nullptr;
static bool                     g_SwapChainOccluded = false;
static UINT                     g_ResizeWidth = 0, g_ResizeHeight = 0;
static ID3D11RenderTargetView* g_mainRenderTargetView = nullptr;

// Forward declarations of helper functions
bool CreateDeviceD3D(HWND hWnd);
void CleanupDeviceD3D();
void CreateRenderTarget();
void CleanupRenderTarget();
LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);

void SetupImGuiStyle();

// Main code
int main(int, char**)
{
    PioStateMachineApp pioApp;


    bool done = false;

    // Create application window
    //ImGui_ImplWin32_EnableDpiAwareness();
    WNDCLASSEXW wc = { sizeof(wc), CS_CLASSDC, WndProc, 0L, 0L, GetModuleHandle(nullptr), nullptr, nullptr, nullptr, nullptr, L"PIO Emulator GUI", nullptr };
    ::RegisterClassExW(&wc);
    HWND hwnd = ::CreateWindowW(wc.lpszClassName, L"PIO Emulator with Dear ImGui", WS_OVERLAPPEDWINDOW, 100, 100, 1280, 800, nullptr, nullptr, wc.hInstance, nullptr);

    // Initialize Direct3D
    if (!CreateDeviceD3D(hwnd))
    {
        CleanupDeviceD3D();
        ::UnregisterClassW(wc.lpszClassName, wc.hInstance);
        return 1;
    }

    // Show the window
    ::ShowWindow(hwnd, SW_SHOWDEFAULT);
    ::UpdateWindow(hwnd);

    // Setup Dear ImGui context
    IMGUI_CHECKVERSION();
    ImGui::CreateContext();
    ImGuiIO& io = ImGui::GetIO(); (void)io;
    io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;     // Enable Keyboard Controls
    io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;      // Enable Gamepad Controls

    // Setup Dear ImGui style
    ImGui::StyleColorsDark();
    SetupImGuiStyle();

    // Setup Platform/Renderer backends
    ImGui_ImplWin32_Init(hwnd);
    ImGui_ImplDX11_Init(g_pd3dDevice, g_pd3dDeviceContext);

    // Load Fonts (adjust paths as needed)
    ImFont* customFont = io.Fonts->AddFontFromFileTTF(R"(C:\Users\ethbr\local\msjh.ttc)", 20.0f);
    ImFont* codeFont = io.Fonts->AddFontFromFileTTF(R"(C:\Users\ethbr\local\CascadiaCode.ttf)", 20.0f);
    IM_ASSERT(customFont != nullptr);

    pioApp.initialize();

    // Main loop
    while (!done && !pioApp.shouldExit())
    {
        // Poll and handle messages
        MSG msg;
        while (::PeekMessage(&msg, nullptr, 0U, 0U, PM_REMOVE))
        {
            ::TranslateMessage(&msg);
            ::DispatchMessage(&msg);
            if (msg.message == WM_QUIT)
                done = true;
        }
        if (done)
            break;

        // Handle occlusion
        if (g_SwapChainOccluded && g_pSwapChain->Present(0, DXGI_PRESENT_TEST) == DXGI_STATUS_OCCLUDED)
        {
            ::Sleep(10);
            continue;
        }
        g_SwapChainOccluded = false;

        // Handle resize
        if (g_ResizeWidth != 0 && g_ResizeHeight != 0)
        {
            CleanupRenderTarget();
            g_pSwapChain->ResizeBuffers(0, g_ResizeWidth, g_ResizeHeight, DXGI_FORMAT_UNKNOWN, 0);
            g_ResizeWidth = g_ResizeHeight = 0;
            CreateRenderTarget();
        }

        // Start ImGui frame
        ImGui_ImplDX11_NewFrame();
        ImGui_ImplWin32_NewFrame();
        ImGui::NewFrame();

        pioApp.renderUI();

        // Rendering
        ImGui::Render();
        ImVec4 clear_color = ImVec4(0.45f, 0.55f, 0.60f, 1.00f);
        const float clear_color_with_alpha[4] = { clear_color.x * clear_color.w, clear_color.y * clear_color.w, clear_color.z * clear_color.w, clear_color.w };
        g_pd3dDeviceContext->OMSetRenderTargets(1, &g_mainRenderTargetView, nullptr);
        g_pd3dDeviceContext->ClearRenderTargetView(g_mainRenderTargetView, clear_color_with_alpha);
        ImGui_ImplDX11_RenderDrawData(ImGui::GetDrawData());

        // Present
        HRESULT hr = g_pSwapChain->Present(1, 0); // With vsync
        g_SwapChainOccluded = (hr == DXGI_STATUS_OCCLUDED);
    }

    // Cleanup
    ImGui_ImplDX11_Shutdown();
    ImGui_ImplWin32_Shutdown();
    ImGui::DestroyContext();

    CleanupDeviceD3D();
    ::DestroyWindow(hwnd);
    ::UnregisterClassW(wc.lpszClassName, wc.hInstance);

    return 0;
}

// Helper functions

bool CreateDeviceD3D(HWND hWnd)
{
    // Setup swap chain
    DXGI_SWAP_CHAIN_DESC sd;
    ZeroMemory(&sd, sizeof(sd));
    sd.BufferCount = 2;
    sd.BufferDesc.Width = 0;
    sd.BufferDesc.Height = 0;
    sd.BufferDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
    sd.BufferDesc.RefreshRate.Numerator = 60;
    sd.BufferDesc.RefreshRate.Denominator = 1;
    sd.Flags = DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH;
    sd.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT;
    sd.OutputWindow = hWnd;
    sd.SampleDesc.Count = 1;
    sd.SampleDesc.Quality = 0;
    sd.Windowed = TRUE;
    sd.SwapEffect = DXGI_SWAP_EFFECT_DISCARD;

    UINT createDeviceFlags = 0;
    //createDeviceFlags |= D3D11_CREATE_DEVICE_DEBUG;
    D3D_FEATURE_LEVEL featureLevel;
    const D3D_FEATURE_LEVEL featureLevelArray[2] = { D3D_FEATURE_LEVEL_11_0, D3D_FEATURE_LEVEL_10_0, };
    HRESULT res = D3D11CreateDeviceAndSwapChain(nullptr, D3D_DRIVER_TYPE_HARDWARE, nullptr, createDeviceFlags, featureLevelArray, 2, D3D11_SDK_VERSION, &sd, &g_pSwapChain, &g_pd3dDevice, &featureLevel, &g_pd3dDeviceContext);
    if (res == DXGI_ERROR_UNSUPPORTED) // Try high-performance WARP software driver if hardware is not available.
        res = D3D11CreateDeviceAndSwapChain(nullptr, D3D_DRIVER_TYPE_WARP, nullptr, createDeviceFlags, featureLevelArray, 2, D3D11_SDK_VERSION, &sd, &g_pSwapChain, &g_pd3dDevice, &featureLevel, &g_pd3dDeviceContext);
    if (res != S_OK)
        return false;

    CreateRenderTarget();
    return true;
}

void CleanupDeviceD3D()
{
    CleanupRenderTarget();
    if (g_pSwapChain) { g_pSwapChain->Release(); g_pSwapChain = nullptr; }
    if (g_pd3dDeviceContext) { g_pd3dDeviceContext->Release(); g_pd3dDeviceContext = nullptr; }
    if (g_pd3dDevice) { g_pd3dDevice->Release(); g_pd3dDevice = nullptr; }
}

void CreateRenderTarget()
{
    ID3D11Texture2D* pBackBuffer;
    g_pSwapChain->GetBuffer(0, IID_PPV_ARGS(&pBackBuffer));
    g_pd3dDevice->CreateRenderTargetView(pBackBuffer, nullptr, &g_mainRenderTargetView);
    pBackBuffer->Release();
}

void CleanupRenderTarget()
{
    if (g_mainRenderTargetView) { g_mainRenderTargetView->Release(); g_mainRenderTargetView = nullptr; }
}

// Forward declare message handler from imgui_impl_win32.cpp
extern IMGUI_IMPL_API LRESULT ImGui_ImplWin32_WndProcHandler(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);

// Win32 message handler
LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
    if (ImGui_ImplWin32_WndProcHandler(hWnd, msg, wParam, lParam))
        return true;

    switch (msg)
    {
    case WM_SIZE:
        if (wParam == SIZE_MINIMIZED)
            return 0;
        g_ResizeWidth = (UINT)LOWORD(lParam); // Queue resize
        g_ResizeHeight = (UINT)HIWORD(lParam);
        return 0;
    case WM_SYSCOMMAND:
        if ((wParam & 0xfff0) == SC_KEYMENU) // Disable ALT application menu
            return 0;
        break;
    case WM_DESTROY:
        ::PostQuitMessage(0);
        return 0;
    }
    return ::DefWindowProcW(hWnd, msg, wParam, lParam);
}

void SetupImGuiStyle()
{
    // Unreal style by dev0-1 from ImThemes
    ImGuiStyle& style = ImGui::GetStyle();

    style.Alpha = 1.0f;
    style.DisabledAlpha = 0.6000000238418579f;
    style.WindowPadding = ImVec2(8.0f, 8.0f);
    style.WindowRounding = 0.0f;
    style.WindowBorderSize = 1.0f;
    style.WindowMinSize = ImVec2(32.0f, 32.0f);
    style.WindowTitleAlign = ImVec2(0.0f, 0.5f);
    style.WindowMenuButtonPosition = ImGuiDir_Left;
    style.ChildRounding = 0.0f;
    style.ChildBorderSize = 1.0f;
    style.PopupRounding = 0.0f;
    style.PopupBorderSize = 1.0f;
    style.FramePadding = ImVec2(4.0f, 3.0f);
    style.FrameRounding = 0.0f;
    style.FrameBorderSize = 0.0f;
    style.ItemSpacing = ImVec2(8.0f, 4.0f);
    style.ItemInnerSpacing = ImVec2(4.0f, 4.0f);
    style.CellPadding = ImVec2(4.0f, 2.0f);
    style.IndentSpacing = 21.0f;
    style.ColumnsMinSpacing = 6.0f;
    style.ScrollbarSize = 14.0f;
    style.ScrollbarRounding = 9.0f;
    style.GrabMinSize = 10.0f;
    style.GrabRounding = 0.0f;
    style.TabRounding = 4.0f;
    style.TabBorderSize = 0.0f;
    //style.TabMinWidthForCloseButton = 0.0f;
    style.ColorButtonPosition = ImGuiDir_Right;
    style.ButtonTextAlign = ImVec2(0.5f, 0.5f);
    style.SelectableTextAlign = ImVec2(0.0f, 0.0f);

    style.Colors[ImGuiCol_Text] = ImVec4(1.0f, 1.0f, 1.0f, 1.0f);
    style.Colors[ImGuiCol_TextDisabled] = ImVec4(0.4980392158031464f, 0.4980392158031464f, 0.4980392158031464f, 1.0f);
    style.Colors[ImGuiCol_WindowBg] = ImVec4(0.05882352963089943f, 0.05882352963089943f, 0.05882352963089943f, 0.9399999976158142f);
    style.Colors[ImGuiCol_ChildBg] = ImVec4(1.0f, 1.0f, 1.0f, 0.0f);
    style.Colors[ImGuiCol_PopupBg] = ImVec4(0.0784313753247261f, 0.0784313753247261f, 0.0784313753247261f, 0.9399999976158142f);
    style.Colors[ImGuiCol_Border] = ImVec4(0.4274509847164154f, 0.4274509847164154f, 0.4980392158031464f, 0.5f);
    style.Colors[ImGuiCol_BorderShadow] = ImVec4(0.0f, 0.0f, 0.0f, 0.0f);
    style.Colors[ImGuiCol_FrameBg] = ImVec4(0.2000000029802322f, 0.2078431397676468f, 0.2196078449487686f, 0.5400000214576721f);
    style.Colors[ImGuiCol_FrameBgHovered] = ImVec4(0.4000000059604645f, 0.4000000059604645f, 0.4000000059604645f, 0.4000000059604645f);
    style.Colors[ImGuiCol_FrameBgActive] = ImVec4(0.1764705926179886f, 0.1764705926179886f, 0.1764705926179886f, 0.6700000166893005f);
    style.Colors[ImGuiCol_TitleBg] = ImVec4(0.03921568766236305f, 0.03921568766236305f, 0.03921568766236305f, 1.0f);
    style.Colors[ImGuiCol_TitleBgActive] = ImVec4(0.2862745225429535f, 0.2862745225429535f, 0.2862745225429535f, 1.0f);
    style.Colors[ImGuiCol_TitleBgCollapsed] = ImVec4(0.0f, 0.0f, 0.0f, 0.5099999904632568f);
    style.Colors[ImGuiCol_MenuBarBg] = ImVec4(0.1372549086809158f, 0.1372549086809158f, 0.1372549086809158f, 1.0f);
    style.Colors[ImGuiCol_ScrollbarBg] = ImVec4(0.01960784383118153f, 0.01960784383118153f, 0.01960784383118153f, 0.5299999713897705f);
    style.Colors[ImGuiCol_ScrollbarGrab] = ImVec4(0.3098039329051971f, 0.3098039329051971f, 0.3098039329051971f, 1.0f);
    style.Colors[ImGuiCol_ScrollbarGrabHovered] = ImVec4(0.407843142747879f, 0.407843142747879f, 0.407843142747879f, 1.0f);
    style.Colors[ImGuiCol_ScrollbarGrabActive] = ImVec4(0.5098039507865906f, 0.5098039507865906f, 0.5098039507865906f, 1.0f);
    style.Colors[ImGuiCol_CheckMark] = ImVec4(0.9372549057006836f, 0.9372549057006836f, 0.9372549057006836f, 1.0f);
    style.Colors[ImGuiCol_SliderGrab] = ImVec4(0.5098039507865906f, 0.5098039507865906f, 0.5098039507865906f, 1.0f);
    style.Colors[ImGuiCol_SliderGrabActive] = ImVec4(0.8588235378265381f, 0.8588235378265381f, 0.8588235378265381f, 1.0f);
    style.Colors[ImGuiCol_Button] = ImVec4(0.4392156898975372f, 0.4392156898975372f, 0.4392156898975372f, 0.4000000059604645f);
    style.Colors[ImGuiCol_ButtonHovered] = ImVec4(0.4588235318660736f, 0.4666666686534882f, 0.47843137383461f, 1.0f);
    style.Colors[ImGuiCol_ButtonActive] = ImVec4(0.4196078479290009f, 0.4196078479290009f, 0.4196078479290009f, 1.0f);
    style.Colors[ImGuiCol_Header] = ImVec4(0.6980392336845398f, 0.6980392336845398f, 0.6980392336845398f, 0.3100000023841858f);
    style.Colors[ImGuiCol_HeaderHovered] = ImVec4(0.6980392336845398f, 0.6980392336845398f, 0.6980392336845398f, 0.800000011920929f);
    style.Colors[ImGuiCol_HeaderActive] = ImVec4(0.47843137383461f, 0.4980392158031464f, 0.5176470875740051f, 1.0f);
    style.Colors[ImGuiCol_Separator] = ImVec4(0.4274509847164154f, 0.4274509847164154f, 0.4980392158031464f, 0.5f);
    style.Colors[ImGuiCol_SeparatorHovered] = ImVec4(0.7176470756530762f, 0.7176470756530762f, 0.7176470756530762f, 0.7799999713897705f);
    style.Colors[ImGuiCol_SeparatorActive] = ImVec4(0.5098039507865906f, 0.5098039507865906f, 0.5098039507865906f, 1.0f);
    style.Colors[ImGuiCol_ResizeGrip] = ImVec4(0.9098039269447327f, 0.9098039269447327f, 0.9098039269447327f, 0.25f);
    style.Colors[ImGuiCol_ResizeGripHovered] = ImVec4(0.8078431487083435f, 0.8078431487083435f, 0.8078431487083435f, 0.6700000166893005f);
    style.Colors[ImGuiCol_ResizeGripActive] = ImVec4(0.4588235318660736f, 0.4588235318660736f, 0.4588235318660736f, 0.949999988079071f);
    style.Colors[ImGuiCol_Tab] = ImVec4(0.1764705926179886f, 0.3490196168422699f, 0.5764706134796143f, 0.8619999885559082f);
    style.Colors[ImGuiCol_TabHovered] = ImVec4(0.2588235437870026f, 0.5882353186607361f, 0.9764705896377563f, 0.800000011920929f);
    style.Colors[ImGuiCol_TabActive] = ImVec4(0.196078434586525f, 0.407843142747879f, 0.6784313917160034f, 1.0f);
    style.Colors[ImGuiCol_TabUnfocused] = ImVec4(0.06666667014360428f, 0.1019607856869698f, 0.1450980454683304f, 0.9724000096321106f);
    style.Colors[ImGuiCol_TabUnfocusedActive] = ImVec4(0.1333333402872086f, 0.2588235437870026f, 0.4235294163227081f, 1.0f);
    style.Colors[ImGuiCol_PlotLines] = ImVec4(0.6078431606292725f, 0.6078431606292725f, 0.6078431606292725f, 1.0f);
    style.Colors[ImGuiCol_PlotLinesHovered] = ImVec4(1.0f, 0.4274509847164154f, 0.3490196168422699f, 1.0f);
    style.Colors[ImGuiCol_PlotHistogram] = ImVec4(0.729411780834198f, 0.6000000238418579f, 0.1490196138620377f, 1.0f);
    style.Colors[ImGuiCol_PlotHistogramHovered] = ImVec4(1.0f, 0.6000000238418579f, 0.0f, 1.0f);
    style.Colors[ImGuiCol_TableHeaderBg] = ImVec4(0.1882352977991104f, 0.1882352977991104f, 0.2000000029802322f, 1.0f);
    style.Colors[ImGuiCol_TableBorderStrong] = ImVec4(0.3098039329051971f, 0.3098039329051971f, 0.3490196168422699f, 1.0f);
    style.Colors[ImGuiCol_TableBorderLight] = ImVec4(0.2274509817361832f, 0.2274509817361832f, 0.2470588237047195f, 1.0f);
    style.Colors[ImGuiCol_TableRowBg] = ImVec4(0.0f, 0.0f, 0.0f, 0.0f);
    style.Colors[ImGuiCol_TableRowBgAlt] = ImVec4(1.0f, 1.0f, 1.0f, 0.05999999865889549f);
    style.Colors[ImGuiCol_TextSelectedBg] = ImVec4(0.8666666746139526f, 0.8666666746139526f, 0.8666666746139526f, 0.3499999940395355f);
    style.Colors[ImGuiCol_DragDropTarget] = ImVec4(1.0f, 1.0f, 0.0f, 0.8999999761581421f);
    style.Colors[ImGuiCol_NavHighlight] = ImVec4(0.6000000238418579f, 0.6000000238418579f, 0.6000000238418579f, 1.0f);
    style.Colors[ImGuiCol_NavWindowingHighlight] = ImVec4(1.0f, 1.0f, 1.0f, 0.699999988079071f);
    style.Colors[ImGuiCol_NavWindowingDimBg] = ImVec4(0.800000011920929f, 0.800000011920929f, 0.800000011920929f, 0.2000000029802322f);
    style.Colors[ImGuiCol_ModalWindowDimBg] = ImVec4(0.800000011920929f, 0.800000011920929f, 0.800000011920929f, 0.3499999940395355f);
}
===== ./PioStateMachineApp.cpp =====
#include "PioStateMachineApp.h"
#include "imgui.h"

void PioStateMachineApp::initialize() {
    // Reset the emulator to a clean state
    pio = PioStateMachine();

    // Load WS2812 program
    static const uint16_t ws2812_program_instructions[] = {
        0x6321, //  0: out    x, 1    side 0 [3]
        0x1223, //  1: jmp    !x, 3   side 1 [2]
        0x1200, //  2: jmp    0       side 1 [2]
        0xa242, //  3: nop            side 0 [2]
    };

    program_size = sizeof(ws2812_program_instructions) / sizeof(uint16_t);
    for (int i = 0; i < program_size; ++i) {
        pio.instructionMemory[i] = ws2812_program_instructions[i];
    }

    // Configure settings for WS2812
    pio.settings.sideset_opt = false;
    pio.settings.sideset_count = 1;
    pio.settings.sideset_base = 22;
    pio.settings.pull_threshold = 24;
    pio.settings.out_shift_right = false;
    pio.settings.autopull_enable = true;
    pio.settings.warp_start = 0;
    pio.settings.warp_end = 3;

    pio.gpio.pindirs[22] = 0; // Output

    // Initialize FIFO data
    pio.fifo.tx_fifo[0] = 0xbaabff00;
    pio.fifo.tx_fifo_count = 1;

    // Reset GUI state
    tick_steps = 1;
    show_main_window = true;
    show_controls = true;
    done = false;
}

void PioStateMachineApp::reset() {
    initialize(); // Reuse initialization logic
}

void PioStateMachineApp::renderControls() {
    if (!ImGui::Begin("Controls", &show_controls)) {
        ImGui::End();
        return;
    }

    if (ImGui::Button("Tick")) {
        pio.tick();
    }

    ImGui::InputInt("Steps", &tick_steps, 1, 100);
    if (tick_steps < 1) tick_steps = 1; // Validate
    ImGui::SameLine();
    if (ImGui::Button("Tick Multiple")) {
        for (int i = 0; i < tick_steps; ++i) {
            pio.tick();
        }
    }

    if (ImGui::Button("Reset")) {
        reset();
    }

    // Run Until feature
    static char var_name[32] = "regs.pc";
    static uint32_t target_value = 0;
    static int max_cycles = 10000;
    ImGui::InputText("Run Until Variable", var_name, IM_ARRAYSIZE(var_name));
    ImGui::InputScalar("Target Value", ImGuiDataType_U32, &target_value, nullptr, nullptr, "%08X", ImGuiInputTextFlags_CharsHexadecimal);
    ImGui::InputInt("Max Cycles", &max_cycles);
    if (max_cycles < 1) max_cycles = 1; // Validate
    if (ImGui::Button("Run Until")) {
        pio.run_until_var(var_name, target_value, max_cycles);
    }

    ImGui::End();
}

void PioStateMachineApp::renderRuntimeTab() {
    if (!ImGui::BeginTable("RuntimeTable", 2, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg)) {
        return;
    }

    ImGui::TableSetupColumn("Property");
    ImGui::TableSetupColumn("Value");
    ImGui::TableHeadersRow();

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Clock");
    ImGui::TableSetColumnIndex(1);
    int clk = pio.clock;
    if (ImGui::InputInt("##clock", &clk)) {
        if (clk >= 0) pio.clock = clk; // Validate
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Current Instruction");
    ImGui::TableSetColumnIndex(1);
    uint16_t curr_instr = pio.currentInstruction;
    if (ImGui::InputScalar("##currinstr", ImGuiDataType_U16, &curr_instr, nullptr, nullptr, "%04X", ImGuiInputTextFlags_CharsHexadecimal)) {
        pio.currentInstruction = curr_instr;
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("JMP To");
    ImGui::TableSetColumnIndex(1);
    int jmp = pio.jmp_to;
    if (ImGui::InputInt("##jmpto", &jmp)) {
        if (jmp >= -1 && jmp < 32) pio.jmp_to = jmp; // Validate
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Skip Increase PC");
    ImGui::TableSetColumnIndex(1);
    bool skip_pc = pio.skip_increase_pc;
    if (ImGui::Checkbox("##skippc", &skip_pc)) {
        pio.skip_increase_pc = skip_pc;
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Delay Delay");
    ImGui::TableSetColumnIndex(1);
    bool delay_d = pio.delay_delay;
    if (ImGui::Checkbox("##delaydelay", &delay_d)) {
        pio.delay_delay = delay_d;
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Skip Delay");
    ImGui::TableSetColumnIndex(1);
    bool skip_d = pio.skip_delay;
    if (ImGui::Checkbox("##skipdelay", &skip_d)) {
        pio.skip_delay = skip_d;
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Exec Command");
    ImGui::TableSetColumnIndex(1);
    bool exec_c = pio.exec_command;
    if (ImGui::Checkbox("##execcmd", &exec_c)) {
        pio.exec_command = exec_c;
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Wait Stalling");
    ImGui::TableSetColumnIndex(1);
    bool wait_s = pio.wait_is_stalling;
    if (ImGui::Checkbox("##waitstall", &wait_s)) {
        pio.wait_is_stalling = wait_s;
    }

    ImGui::EndTable();
}

void PioStateMachineApp::renderRegistersTab() {
    if (!ImGui::BeginTable("RegistersTable", 2, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg)) {
        return;
    }

    ImGui::TableSetupColumn("Register");
    ImGui::TableSetupColumn("Value");
    ImGui::TableHeadersRow();

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("X");
    ImGui::TableSetColumnIndex(1);
    uint32_t x_val = pio.regs.x;
    if (ImGui::InputScalar("##x", ImGuiDataType_U32, &x_val, nullptr, nullptr, "%08X", ImGuiInputTextFlags_CharsHexadecimal)) {
        pio.regs.x = x_val;
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Y");
    ImGui::TableSetColumnIndex(1);
    uint32_t y_val = pio.regs.y;
    if (ImGui::InputScalar("##y", ImGuiDataType_U32, &y_val, nullptr, nullptr, "%08X", ImGuiInputTextFlags_CharsHexadecimal)) {
        pio.regs.y = y_val;
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("ISR");
    ImGui::TableSetColumnIndex(1);
    uint32_t isr_val = pio.regs.isr;
    if (ImGui::InputScalar("##isr", ImGuiDataType_U32, &isr_val, nullptr, nullptr, "%08X", ImGuiInputTextFlags_CharsHexadecimal)) {
        pio.regs.isr = isr_val;
    }
    ImGui::SameLine();
    ImGui::Text("(Shift Count:");
    ImGui::SameLine();
    uint32_t isr_count = pio.regs.isr_shift_count;
    if (ImGui::InputScalar("##isrcount", ImGuiDataType_U32, &isr_count)) {
        if (isr_count <= 32) pio.regs.isr_shift_count = isr_count; // Validate
    }
    ImGui::SameLine();
    ImGui::Text(")");

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("OSR");
    ImGui::TableSetColumnIndex(1);
    uint32_t osr_val = pio.regs.osr;
    if (ImGui::InputScalar("##osr", ImGuiDataType_U32, &osr_val, nullptr, nullptr, "%08X", ImGuiInputTextFlags_CharsHexadecimal)) {
        pio.regs.osr = osr_val;
    }
    ImGui::SameLine();
    ImGui::Text("(Shift Count:");
    ImGui::SameLine();
    uint32_t osr_count = pio.regs.osr_shift_count;
    if (ImGui::InputScalar("##osrcount", ImGuiDataType_U32, &osr_count)) {
        if (osr_count <= 32) pio.regs.osr_shift_count = osr_count; // Validate
    }
    ImGui::SameLine();
    ImGui::Text(")");

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("PC");
    ImGui::TableSetColumnIndex(1);
    uint32_t pc_val = pio.regs.pc;
    if (ImGui::InputScalar("##pc", ImGuiDataType_U32, &pc_val)) {
        if (pc_val < 32) pio.regs.pc = pc_val; // Validate
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Delay");
    ImGui::TableSetColumnIndex(1);
    uint32_t delay_val = pio.regs.delay;
    if (ImGui::InputScalar("##delay", ImGuiDataType_U32, &delay_val)) {
        pio.regs.delay = delay_val;
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Status");
    ImGui::TableSetColumnIndex(1);
    uint32_t status_val = pio.regs.status;
    if (ImGui::InputScalar("##status", ImGuiDataType_U32, &status_val)) {
        pio.regs.status = status_val;
    }

    ImGui::EndTable();
}

void PioStateMachineApp::renderSettingsTab() {
    if (!ImGui::BeginTable("SettingsTable", 2, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg)) {
        return;
    }

    ImGui::TableSetupColumn("Setting");
    ImGui::TableSetupColumn("Value");
    ImGui::TableHeadersRow();

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Sideset Count");
    ImGui::TableSetColumnIndex(1);
    int sideset_cnt = pio.settings.sideset_count;
    if (ImGui::InputInt("##sidesetcnt", &sideset_cnt)) {
        if (sideset_cnt >= 0 && sideset_cnt <= 5) pio.settings.sideset_count = sideset_cnt; // Validate
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Sideset Opt");
    ImGui::TableSetColumnIndex(1);
    bool sideset_o = pio.settings.sideset_opt;
    if (ImGui::Checkbox("##sidesetopt", &sideset_o)) {
        pio.settings.sideset_opt = sideset_o;
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Sideset to Pindirs");
    ImGui::TableSetColumnIndex(1);
    bool sideset_p = pio.settings.sideset_to_pindirs;
    if (ImGui::Checkbox("##sidesetpindirs", &sideset_p)) {
        pio.settings.sideset_to_pindirs = sideset_p;
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Sideset Base");
    ImGui::TableSetColumnIndex(1);
    int sideset_b = pio.settings.sideset_base;
    if (ImGui::InputInt("##sidesetbase", &sideset_b)) {
        if (sideset_b >= -1 && sideset_b < 32) pio.settings.sideset_base = sideset_b; // Validate
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("In Base");
    ImGui::TableSetColumnIndex(1);
    int in_b = pio.settings.in_base;
    if (ImGui::InputInt("##inbase", &in_b)) {
        if (in_b >= -1 && in_b < 32) pio.settings.in_base = in_b; // Validate
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Out Base");
    ImGui::TableSetColumnIndex(1);
    int out_b = pio.settings.out_base;
    if (ImGui::InputInt("##outbase", &out_b)) {
        if (out_b >= -1 && out_b < 32) pio.settings.out_base = out_b; // Validate
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Set Base");
    ImGui::TableSetColumnIndex(1);
    int set_b = pio.settings.set_base;
    if (ImGui::InputInt("##setbase", &set_b)) {
        if (set_b >= -1 && set_b < 32) pio.settings.set_base = set_b; // Validate
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("JMP Pin");
    ImGui::TableSetColumnIndex(1);
    int jmp_p = pio.settings.jmp_pin;
    if (ImGui::InputInt("##jmppin", &jmp_p)) {
        if (jmp_p >= -1 && jmp_p < 32) pio.settings.jmp_pin = jmp_p; // Validate
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Set Count");
    ImGui::TableSetColumnIndex(1);
    int set_cnt = pio.settings.set_count;
    if (ImGui::InputInt("##setcnt", &set_cnt)) {
        if (set_cnt >= -1 && set_cnt <= 5) pio.settings.set_count = set_cnt; // Validate
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Out Count");
    ImGui::TableSetColumnIndex(1);
    int out_cnt = pio.settings.out_count;
    if (ImGui::InputInt("##outcnt", &out_cnt)) {
        if (out_cnt >= -1 && out_cnt <= 32) pio.settings.out_count = out_cnt; // Validate
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Push Threshold");
    ImGui::TableSetColumnIndex(1);
    uint32_t push_th = pio.settings.push_threshold;
    if (ImGui::InputScalar("##pushth", ImGuiDataType_U32, &push_th)) {
        if (push_th <= 32) pio.settings.push_threshold = push_th; // Validate
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Pull Threshold");
    ImGui::TableSetColumnIndex(1);
    uint32_t pull_th = pio.settings.pull_threshold;
    if (ImGui::InputScalar("##pullth", ImGuiDataType_U32, &pull_th)) {
        if (pull_th <= 32) pio.settings.pull_threshold = pull_th; // Validate
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("FIFO Level N");
    ImGui::TableSetColumnIndex(1);
    int fifo_n = pio.settings.fifo_level_N;
    if (ImGui::InputInt("##fifon", &fifo_n)) {
        if (fifo_n >= -1 && fifo_n <= 8) pio.settings.fifo_level_N = fifo_n; // Validate
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Warp Start");
    ImGui::TableSetColumnIndex(1);
    uint32_t warp_s = pio.settings.warp_start;
    if (ImGui::InputScalar("##warps", ImGuiDataType_U32, &warp_s)) {
        if (warp_s <= 31) pio.settings.warp_start = warp_s; // Validate
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Warp End");
    ImGui::TableSetColumnIndex(1);
    uint32_t warp_e = pio.settings.warp_end;
    if (ImGui::InputScalar("##warpe", ImGuiDataType_U32, &warp_e)) {
        if (warp_e <= 31) pio.settings.warp_end = warp_e; // Validate
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("In Shift Right");
    ImGui::TableSetColumnIndex(1);
    bool in_sr = pio.settings.in_shift_right;
    if (ImGui::Checkbox("##insr", &in_sr)) {
        pio.settings.in_shift_right = in_sr;
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Out Shift Right");
    ImGui::TableSetColumnIndex(1);
    bool out_sr = pio.settings.out_shift_right;
    if (ImGui::Checkbox("##outsr", &out_sr)) {
        pio.settings.out_shift_right = out_sr;
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("In Shift Autopush");
    ImGui::TableSetColumnIndex(1);
    bool in_ap = pio.settings.in_shift_autopush;
    if (ImGui::Checkbox("##inap", &in_ap)) {
        pio.settings.in_shift_autopush = in_ap;
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Out Shift Autopull");
    ImGui::TableSetColumnIndex(1);
    bool out_ap = pio.settings.out_shift_autopull;
    if (ImGui::Checkbox("##outap", &out_ap)) {
        pio.settings.out_shift_autopull = out_ap;
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Autopull Enable");
    ImGui::TableSetColumnIndex(1);
    bool autopull_e = pio.settings.autopull_enable;
    if (ImGui::Checkbox("##autopulle", &autopull_e)) {
        pio.settings.autopull_enable = autopull_e;
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Autopush Enable");
    ImGui::TableSetColumnIndex(1);
    bool autopush_e = pio.settings.autopush_enable;
    if (ImGui::Checkbox("##autopushe", &autopush_e)) {
        pio.settings.autopush_enable = autopush_e;
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Status Sel");
    ImGui::TableSetColumnIndex(1);
    bool status_s = pio.settings.status_sel;
    if (ImGui::Checkbox("##statussel", &status_s)) {
        pio.settings.status_sel = status_s;
    }

    ImGui::EndTable();
}

void PioStateMachineApp::renderGpioTab() {
    if (!ImGui::BeginTable("GPIOTable", 2, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg)) {
        return;
    }

    ImGui::TableSetupColumn("Property");
    ImGui::TableSetupColumn("Value");
    ImGui::TableHeadersRow();

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Pin 22 Raw Data");
    ImGui::TableSetColumnIndex(1);
    int raw22 = pio.gpio.raw_data[22];
    if (ImGui::InputInt("##raw22", &raw22, 0)) {
        pio.gpio.raw_data[22] = static_cast<int8_t>(raw22 & 1); // Validate
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Pin 22 Pindir");
    ImGui::TableSetColumnIndex(1);
    int pindir22 = pio.gpio.pindirs[22];
    if (ImGui::InputInt("##pindir22", &pindir22, 0)) {
        pio.gpio.pindirs[22] = static_cast<int8_t>(pindir22 & 1); // Validate
    }
    ImGui::SameLine();
    ImGui::Text("(0=output,1=input)");

    ImGui::EndTable();
}

void PioStateMachineApp::renderFifoTab() {
    if (!ImGui::BeginTable("FIFOsTable", 2, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg)) {
        return;
    }

    ImGui::TableSetupColumn("Property");
    ImGui::TableSetupColumn("Value");
    ImGui::TableHeadersRow();

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("TX FIFO Count");
    ImGui::TableSetColumnIndex(1);
    int tx_count = pio.fifo.tx_fifo_count;
    if (ImGui::InputInt("##txcount", &tx_count)) {
        if (tx_count >= 0 && tx_count <= 8) pio.fifo.tx_fifo_count = static_cast<uint8_t>(tx_count); // Validate
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("RX FIFO Count");
    ImGui::TableSetColumnIndex(1);
    int rx_count = pio.fifo.rx_fifo_count;
    if (ImGui::InputInt("##rxcount", &rx_count)) {
        if (rx_count >= 0 && rx_count <= 8) pio.fifo.rx_fifo_count = static_cast<uint8_t>(rx_count); // Validate
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Push Stalling");
    ImGui::TableSetColumnIndex(1);
    bool push_s = pio.fifo.push_is_stalling;
    if (ImGui::Checkbox("##pushstall", &push_s)) {
        pio.fifo.push_is_stalling = push_s;
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("Pull Stalling");
    ImGui::TableSetColumnIndex(1);
    bool pull_s = pio.fifo.pull_is_stalling;
    if (ImGui::Checkbox("##pullstall", &pull_s)) {
        pio.fifo.pull_is_stalling = pull_s;
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("TX FIFO[0]");
    ImGui::TableSetColumnIndex(1);
    uint32_t tx0 = pio.fifo.tx_fifo[0];
    if (ImGui::InputScalar("##tx0", ImGuiDataType_U32, &tx0, nullptr, nullptr, "%08X", ImGuiInputTextFlags_CharsHexadecimal)) {
        pio.fifo.tx_fifo[0] = tx0;
    }

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("RX FIFO[0]");
    ImGui::TableSetColumnIndex(1);
    uint32_t rx0 = pio.fifo.rx_fifo[0];
    if (ImGui::InputScalar("##rx0", ImGuiDataType_U32, &rx0, nullptr, nullptr, "%08X", ImGuiInputTextFlags_CharsHexadecimal)) {
        pio.fifo.rx_fifo[0] = rx0;
    }

    ImGui::EndTable();
}

void PioStateMachineApp::renderIrqTab() {
    if (!ImGui::BeginTable("IRQTable", 2, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg)) {
        return;
    }

    ImGui::TableSetupColumn("Property");
    ImGui::TableSetupColumn("Value");
    ImGui::TableHeadersRow();

    ImGui::TableNextRow();
    ImGui::TableSetColumnIndex(0);
    ImGui::Text("IRQ Waiting");
    ImGui::TableSetColumnIndex(1);
    bool irq_w = pio.irq_is_waiting;
    if (ImGui::Checkbox("##irqwait", &irq_w)) {
        pio.irq_is_waiting = irq_w;
    }

    for (int i = 0; i < 8; ++i) {
        ImGui::TableNextRow();
        ImGui::TableSetColumnIndex(0);
        ImGui::Text("IRQ Flag %d", i);
        ImGui::TableSetColumnIndex(1);
        ImGui::PushID(i);
        bool irq_f = pio.irq_flags[i];
        if (ImGui::Checkbox("##irq", &irq_f)) {
            pio.irq_flags[i] = irq_f;
        }
        ImGui::PopID();
    }

    ImGui::EndTable();
}

void PioStateMachineApp::renderProgramTab() {
    if (!ImGui::BeginTable("ProgramTable", 2, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg)) {
        return;
    }

    ImGui::TableSetupColumn("Address");
    ImGui::TableSetupColumn("Instruction");
    ImGui::TableHeadersRow();

    for (int i = 0; i < program_size; ++i) {
        ImGui::TableNextRow();
        ImGui::TableSetColumnIndex(0);
        ImGui::Text("0x%02X", i);
        ImGui::TableSetColumnIndex(1);
        ImGui::PushID(i);
        uint16_t instr = pio.instructionMemory[i];
        if (ImGui::InputScalar("##instr", ImGuiDataType_U16, &instr, nullptr, nullptr, "%04X", ImGuiInputTextFlags_CharsHexadecimal)) {
            pio.instructionMemory[i] = instr;
        }
        ImGui::PopID();
    }

    ImGui::EndTable();
}

void PioStateMachineApp::renderUI() {
    renderControls();

    if (!show_main_window || !ImGui::Begin("PIO Emulator", &show_main_window)) {
        ImGui::End();
        return;
    }

    if (ImGui::BeginTabBar("PioTabs")) {
        if (ImGui::BeginTabItem("Runtime")) {
            renderRuntimeTab();
            ImGui::EndTabItem();
        }
        if (ImGui::BeginTabItem("Registers")) {
            renderRegistersTab();
            ImGui::EndTabItem();
        }
        if (ImGui::BeginTabItem("Settings")) {
            renderSettingsTab();
            ImGui::EndTabItem();
        }
        if (ImGui::BeginTabItem("GPIO")) {
            renderGpioTab();
            ImGui::EndTabItem();
        }
        if (ImGui::BeginTabItem("FIFOs")) {
            renderFifoTab();
            ImGui::EndTabItem();
        }
        if (ImGui::BeginTabItem("IRQs")) {
            renderIrqTab();
            ImGui::EndTabItem();
        }
        if (ImGui::BeginTabItem("Program")) {
            renderProgramTab();
            ImGui::EndTabItem();
        }
        ImGui::EndTabBar();
    }

    ImGui::End();

    // Set done to true if both windows are closed
    if (!show_main_window && !show_controls) {
        done = true;
    }
}
===== ./PioStateMachineApp.h =====
#pragma once
#include "../PioStateMachine.h"

class PioStateMachineApp {
private:
    PioStateMachine pio;
    bool show_main_window = true;
    bool show_controls = true;
    bool done = false;
    int tick_steps = 1;
    int program_size = 0;

    // UI rendering methods for each tab
    void renderControls();
    void renderRuntimeTab();
    void renderRegistersTab();
    void renderSettingsTab();
    void renderGpioTab();
    void renderFifoTab();
    void renderIrqTab();
    void renderProgramTab();

public:
    void initialize();
    void reset();
    void renderUI();
    bool shouldExit() const { return done; }
};
